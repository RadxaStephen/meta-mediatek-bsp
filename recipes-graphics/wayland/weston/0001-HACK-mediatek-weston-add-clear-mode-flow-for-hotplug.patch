From 8f80b984b834e596e5a889f2a6f9bea1740ddabe Mon Sep 17 00:00:00 2001
From: Tommy Chen <tommyyl.chen@mediatek.com>
Date: Thu, 1 Dec 2022 10:42:32 +0800
Subject: [PATCH] weston: add clear mode flow for hotplug

black screen on monitor after replug DPoC when running weston.
for hotplug case, display driver should disable bridge when unplugged, and
re-enable bridge when re-plugged.
currently disabling bridge could only be done by framework sending a clear
mode commit to drm, then drm calls display driver to disable bridge.
however weston does not send the clear mode commit when unplugged, and
hence the display driver does not disable bridge, nor re-enable bridge
when re-plugged.
as a result, add clear mode flow to weston when unplugged, to make
weston send a clear mode commit to drm.

CR-Id: AUTO00199082
Signed-off-by: Tommy Chen <tommyyl.chen@mediatek.com>
Change-Id: I0f0623b7b42d02e7b5af09f2da714da061ae85e8
(ported from commit Ic749ca8fd6c7d9528b0e213e12e30c352307a4c6)
---
 libweston/backend-drm/drm-internal.h |  2 ++
 libweston/backend-drm/drm.c          |  9 ++++++++-
 libweston/backend-drm/kms.c          | 24 ++++++++++++++++++++++++
 3 files changed, 34 insertions(+), 1 deletion(-)

diff --git a/libweston/backend-drm/drm-internal.h b/libweston/backend-drm/drm-internal.h
index 4860088..896ac3e 100644
--- a/libweston/backend-drm/drm-internal.h
+++ b/libweston/backend-drm/drm-internal.h
@@ -872,3 +872,5 @@ renderer_switch_binding(struct weston_keyboard *keyboard,
 	weston_log("Compiled without GBM/EGL support\n");
 }
 #endif
+
+int atomic_clear_mode (struct drm_output *output);
\ No newline at end of file
diff --git a/libweston/backend-drm/drm.c b/libweston/backend-drm/drm.c
index 4278770..abc2550 100644
--- a/libweston/backend-drm/drm.c
+++ b/libweston/backend-drm/drm.c
@@ -2397,8 +2397,15 @@ drm_backend_update_connectors(struct drm_backend *b, struct udev_device *drm_dev
 		 * one of the searches must fail. */
 		assert(head == NULL || writeback == NULL);
 
-		if (head)
+		if (head) {
 			ret = drm_head_update_info(head, conn);
+			if (!head->base.connected) {
+				struct weston_head *w_head = &head->base;
+				struct drm_output *output = to_drm_output(w_head->output);
+				if (!atomic_clear_mode(output))
+					weston_log("atomic_clear_mode ok\n");
+			}
+		}
 		else if (writeback)
 			ret = drm_writeback_update_info(writeback, conn);
 		else
diff --git a/libweston/backend-drm/kms.c b/libweston/backend-drm/kms.c
index 780d007..f3decc4 100644
--- a/libweston/backend-drm/kms.c
+++ b/libweston/backend-drm/kms.c
@@ -839,6 +839,30 @@ plane_add_prop(drmModeAtomicReq *req, struct drm_plane *plane,
 	return (ret <= 0) ? -1 : 0;
 }
 
+int atomic_clear_mode(struct drm_output *output)
+{
+	struct drm_head *head;
+	struct drm_backend *b = to_drm_backend(output->base.compositor);
+	struct drm_crtc *crtc = output->crtc;
+	int ret = 0;
+
+	drmModeAtomicReq *req = drmModeAtomicAlloc();
+
+	ret |= crtc_add_prop(req, crtc, WDRM_CRTC_MODE_ID, 0);
+	ret |= crtc_add_prop(req, crtc, WDRM_CRTC_ACTIVE, 0);
+
+	wl_list_for_each(head, &output->base.head_list, base.output_link)
+			ret |= connector_add_prop(req, &head->connector, WDRM_CONNECTOR_CRTC_ID, 0);
+
+	ret |= drmModeAtomicCommit(b->drm.fd, req, DRM_MODE_ATOMIC_ALLOW_MODESET, b);
+
+	if(ret == 0)
+		drm_debug(b, "[atomic_clear_mode] drmModeAtomicCommit ok\n");
+	drmModeAtomicFree(req);
+
+	return ret;
+}
+
 static bool
 drm_connector_has_prop(struct drm_connector *connector,
 		       enum wdrm_connector_property prop)
