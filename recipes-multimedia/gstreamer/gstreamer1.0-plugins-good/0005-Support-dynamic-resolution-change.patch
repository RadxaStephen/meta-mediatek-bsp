From 108ff2cae5d60b5554b54e7f619f66fa69a8b30d Mon Sep 17 00:00:00 2001
From: Shengqi Yu <shengqi.yu@mediatek.com>
Date: Mon, 11 Jul 2022 20:13:51 +0800
Subject: [PATCH 5/6] Support dynamic resolution change

Add support dynamic resolution change

CR-Id: AUTO00078248
CR-Id: AUTO00204932

Signed-off-by: Shengqi Yu <shengqi.yu@mediatek.com>
Signed-off-by: Macross Chen <macross.chen@mediatek.com>

%% original patch: 0006-Support-dynamic-resolution-change.patch
---
 sys/v4l2/gstv4l2bufferpool.c |  63 +++++++-
 sys/v4l2/gstv4l2object.c     | 116 ++++++++++++++
 sys/v4l2/gstv4l2object.h     |  16 ++
 sys/v4l2/gstv4l2transform.c  |   5 +
 sys/v4l2/gstv4l2videodec.c   | 303 ++++++++++++++++++++++++++++++++++-
 sys/v4l2/gstv4l2videodec.h   |   7 +
 6 files changed, 499 insertions(+), 11 deletions(-)

diff --git a/sys/v4l2/gstv4l2bufferpool.c b/sys/v4l2/gstv4l2bufferpool.c
index a0a2189..e4af67c 100644
--- a/sys/v4l2/gstv4l2bufferpool.c
+++ b/sys/v4l2/gstv4l2bufferpool.c
@@ -29,10 +29,15 @@
 #ifndef _GNU_SOURCE
 # define _GNU_SOURCE            /* O_CLOEXEC */
 #endif
+#include <unistd.h>
 #include <fcntl.h>
-
+#include <stdlib.h>
+#include <stdio.h>
+#include <stdint.h>
 #include <sys/mman.h>
 #include <string.h>
+#include <errno.h>
+#include <poll.h>
 #include <unistd.h>
 
 #include "gst/video/video.h"
@@ -1166,7 +1171,7 @@ again:
 
   if (gst_poll_fd_has_error (pool->poll, &pool->pollfd))
     goto select_error;
-
+#if 0
   /* PRI is used to signal that events are available */
   if (gst_poll_fd_has_pri (pool->poll, &pool->pollfd)) {
     struct v4l2_event event = { 0, };
@@ -1187,7 +1192,7 @@ again:
 
     return GST_V4L2_FLOW_RESOLUTION_CHANGE;
   }
-
+#endif
   if (ret == 0)
     goto no_buffers;
 
@@ -1210,14 +1215,23 @@ no_buffers:
   {
     return GST_V4L2_FLOW_LAST_BUFFER;
   }
+#if 0
 dqevent_failed:
   {
     GST_ELEMENT_ERROR (pool->obj->element, RESOURCE, READ, (NULL),
         ("dqevent error: %s (%d)", g_strerror (errno), errno));
     return GST_FLOW_ERROR;
   }
+#endif
 }
 
+GstFlowReturn
+gst_v4l2_buffer_pool_poll_event (GstV4l2BufferPool * pool, gboolean wait)
+{
+  return gst_v4l2_buffer_pool_poll (pool, wait);
+}
+
+
 static GstFlowReturn
 gst_v4l2_buffer_pool_qbuf (GstV4l2BufferPool * pool, GstBuffer * buf,
     GstV4l2MemoryGroup * group, guint32 * frame_number)
@@ -1251,6 +1265,7 @@ gst_v4l2_buffer_pool_qbuf (GstV4l2BufferPool * pool, GstBuffer * buf,
   if (frame_number) {
     group->buffer.timestamp.tv_sec = *frame_number;
     group->buffer.timestamp.tv_usec = 0;
+    GST_LOG_OBJECT (pool, "frame number = %d", *frame_number);
   } else {
     if (GST_BUFFER_TIMESTAMP_IS_VALID (buf)) {
       GstClockTime timestamp = GST_BUFFER_TIMESTAMP (buf);
@@ -1328,12 +1343,12 @@ gst_v4l2_buffer_pool_dqbuf (GstV4l2BufferPool * pool, GstBuffer ** buffer,
     GST_LOG_OBJECT (pool, "nothing to dequeue");
     goto done;
   }
-
+#if 0
   if (res == GST_V4L2_FLOW_RESOLUTION_CHANGE) {
     GST_INFO_OBJECT (pool, "Resolution change detected.");
     goto done;
   }
-
+#endif
   GST_LOG_OBJECT (pool, "dequeueing a buffer");
 
   res = gst_v4l2_allocator_dqbuf (pool->vallocator, &group);
@@ -1728,9 +1743,11 @@ gst_v4l2_buffer_pool_release_buffer (GstBufferPool * bpool, GstBuffer * buffer)
     gint old_buffer_state =
         g_atomic_int_and (&pool->buffer_state[group->buffer.index],
         ~BUFFER_STATE_OUTSTANDING);
+
     queued = (old_buffer_state & BUFFER_STATE_QUEUED) != 0;
-    GST_LOG_OBJECT (pool, "mark buffer %u not outstanding",
-        group->buffer.index);
+
+    GST_LOG_OBJECT (pool, "mark buffer %p(index:%u,state:%d) current-state to %d",
+        buffer, group->buffer.index, old_buffer_state, pool->buffer_state[group->buffer.index]);
   }
 
   gst_v4l2_buffer_pool_complete_release_buffer (bpool, buffer, queued);
@@ -1833,6 +1850,8 @@ gst_v4l2_buffer_pool_new (GstV4l2Object * obj, GstCaps * caps)
   if (fd < 0)
     goto dup_failed;
 
+  GST_DEBUG_OBJECT (pool, "dup video fd:%d into fd:%d", obj->video_fd, fd);
+
   /* setting a significant unique name */
   parent_name = gst_object_get_name (GST_OBJECT (obj->element));
   name = g_strdup_printf ("%s:pool%u:%s",
@@ -1850,8 +1869,10 @@ gst_v4l2_buffer_pool_new (GstV4l2Object * obj, GstCaps * caps)
   gst_poll_add_fd (pool->poll, &pool->pollfd);
   if (V4L2_TYPE_IS_OUTPUT (obj->type))
     gst_poll_fd_ctl_write (pool->poll, &pool->pollfd, TRUE);
-  else
+  else {
     gst_poll_fd_ctl_read (pool->poll, &pool->pollfd, TRUE);
+    gst_poll_fd_ctl_pri (pool->poll,&pool->pollfd, TRUE);
+  }
 
   pool->video_fd = fd;
   pool->obj = obj;
@@ -2348,3 +2369,29 @@ gst_v4l2_buffer_pool_enable_resolution_change (GstV4l2BufferPool * pool)
   if (gst_v4l2_subscribe_event (pool->obj, V4L2_EVENT_SOURCE_CHANGE, input_id))
     gst_poll_fd_ctl_pri (pool->poll, &pool->pollfd, TRUE);
 }
+
+void
+gst_v4l2_buffer_pool_streamoff_res_change (GstBufferPool *bpool)
+{
+  GstV4l2BufferPool *pool = GST_V4L2_BUFFER_POOL (bpool);
+  GstV4l2Object *obj = pool->obj;
+
+  if (!pool->streaming)
+    return;
+
+  switch (obj->mode) {
+    case GST_V4L2_IO_MMAP:
+    case GST_V4L2_IO_USERPTR:
+    case GST_V4L2_IO_DMABUF:
+    case GST_V4L2_IO_DMABUF_IMPORT:
+
+      if (obj->ioctl (pool->video_fd, VIDIOC_STREAMOFF, &obj->type) < 0)
+        GST_WARNING_OBJECT (pool, "STREAMOFF failed with errno %d (%s)",
+            errno, g_strerror (errno));
+
+      GST_DEBUG_OBJECT (pool, "Stopped streaming");
+      break;
+    default:
+      break;
+  }
+}
diff --git a/sys/v4l2/gstv4l2object.c b/sys/v4l2/gstv4l2object.c
index 1f72202..e92934c 100644
--- a/sys/v4l2/gstv4l2object.c
+++ b/sys/v4l2/gstv4l2object.c
@@ -25,6 +25,7 @@
 #include <sys/stat.h>
 #include <fcntl.h>
 #include <errno.h>
+#include <unistd.h>
 #include <string.h>
 #include <sys/mman.h>
 #include <sys/ioctl.h>
@@ -39,6 +40,12 @@
 #include "gstv4l2tuner.h"
 #include "gstv4l2colorbalance.h"
 
+#include "gstv4l2src.h"
+#include "gstv4l2videoenc.h"
+#include "gstv4l2transform.h"
+#include <sys/poll.h>
+#include <poll.h>
+
 #include "gst/gst-i18n-plugin.h"
 
 #include <gst/video/video.h>
@@ -4238,12 +4245,15 @@ gst_v4l2_object_acquire_format (GstV4l2Object * v4l2object, GstVideoInfo * info)
   sel.target = V4L2_SEL_TGT_COMPOSE_DEFAULT;
   if (v4l2object->ioctl (v4l2object->video_fd, VIDIOC_G_SELECTION, &sel) >= 0) {
     r = &sel.r;
+    GST_DEBUG_OBJECT (v4l2object->dbg_obj, "get selection from here");
   } else {
     /* For ancient kernels, fall back to G_CROP */
     memset (&crop, 0, sizeof (struct v4l2_crop));
     crop.type = v4l2object->type;
     if (v4l2object->ioctl (v4l2object->video_fd, VIDIOC_G_CROP, &crop) >= 0)
       r = &crop.c;
+
+    GST_DEBUG_OBJECT (v4l2object->dbg_obj, "get crop from here");
   }
   if (r) {
     align.padding_left = r->left;
@@ -4252,6 +4262,8 @@ gst_v4l2_object_acquire_format (GstV4l2Object * v4l2object, GstVideoInfo * info)
     align.padding_bottom = height - r->height - r->top;
     width = r->width;
     height = r->height;
+
+    GST_DEBUG_OBJECT (v4l2object->dbg_obj, "update widht: %d height: %d", width, height);
   }
 
   switch (fmt.fmt.pix.field) {
@@ -4322,6 +4334,110 @@ unsupported_format:
   }
 }
 
+gboolean
+gst_v4l2_object_get_crop (GstV4l2Object * obj, guint *crop_width, guint *crop_height)
+{
+  struct v4l2_crop crop = { 0 };
+
+  if ((crop_width == NULL) || (crop_height == NULL))
+    return FALSE;
+
+  crop.type = obj->type;
+
+  if (ioctl (obj->video_fd, VIDIOC_G_CROP, &crop) < 0) {
+    GST_WARNING_OBJECT (obj->element, "VIDIOC_G_CROP failed");
+    return FALSE;
+  }
+  *crop_width = crop.c.width;
+  *crop_height = crop.c.height;
+
+  GST_INFO_OBJECT (obj->element,
+      "Got cropping left %u, top %u, size %ux%u", crop.c.left, crop.c.top,
+      crop.c.width, crop.c.height);
+
+  return TRUE;
+}
+
+gint
+gst_v4l2_object_sub_event (GstV4l2Object * v4l2object)
+{
+  gint r;
+  struct v4l2_event_subscription sub = { 0 };
+
+  sub.type = V4L2_EVENT_SOURCE_CHANGE;
+  r = ioctl (v4l2object->video_fd, VIDIOC_SUBSCRIBE_EVENT, &sub);
+
+  sub.type = V4L2_EVENT_EOS;
+  r = ioctl (v4l2object->video_fd, VIDIOC_SUBSCRIBE_EVENT, &sub);
+
+  return r;
+}
+
+gint
+gst_v4l2_object_check_res_change (GstV4l2Object * v4l2object)
+{
+  struct v4l2_event e = { 0 };
+  __u32 change;
+
+  ioctl (v4l2object->video_fd, VIDIOC_DQEVENT, &e);
+  GST_LOG ("e.type=%d",e.type);
+
+  switch (e.type) {
+    case V4L2_EVENT_SOURCE_CHANGE:
+    {
+      change = e.u.src_change.changes;
+      if (change & V4L2_EVENT_SRC_CH_RESOLUTION) {
+        GST_LOG ("Got resolution change,change=%d", change);
+        return GST_V4L2_RET_RES_CHANGE;
+       }
+    }
+    case V4L2_EVENT_EOS:
+    {
+      GST_LOG ("Got Eos Event From Driver");
+      return GST_V4L2_RET_EOS;
+    }
+    default :
+      goto err;
+  }
+  return GST_V4L2_RET_OK;
+err:
+  GST_LOG ("Got unknonw event");
+  return GST_V4L2_RET_FAIL;
+}
+
+gint
+gst_v4l2_object_poll (GstV4l2Object * v4l2object, gint timeout)
+{
+  struct pollfd pfd;
+  gshort wait_event = V4L2_TYPE_IS_OUTPUT (v4l2object->type) ? POLLOUT : POLLIN;
+  gint ret = 0;
+  pfd.fd = v4l2object->video_fd;
+  pfd.events = POLLERR;
+  pfd.events |= wait_event;
+  pfd.events |= POLLPRI;
+
+  GST_LOG ("before poll");
+  ret = poll (&pfd, 1, timeout);
+  GST_LOG ("after poll, pfd.revents=%d", pfd.revents);
+
+  if (ret == -1) {
+    GST_LOG ("poll fail");
+    return GST_V4L2_RET_FAIL;
+  }
+
+  if (pfd.revents & POLLERR)
+    return GST_V4L2_RET_FAIL;
+
+  if (pfd.revents & POLLPRI) {
+    ret = gst_v4l2_object_check_res_change (v4l2object);
+    return ret;
+  }
+
+  if ((pfd.revents & wait_event) == wait_event)
+    return GST_V4L2_RET_OK;
+}
+
+
 /**
  * gst_v4l2_object_set_crop:
  * @obj: the object
diff --git a/sys/v4l2/gstv4l2object.h b/sys/v4l2/gstv4l2object.h
index de0722d..481b23f 100644
--- a/sys/v4l2/gstv4l2object.h
+++ b/sys/v4l2/gstv4l2object.h
@@ -72,6 +72,17 @@ typedef gboolean  (*GstV4l2GetInOutFunction)  (GstV4l2Object * v4l2object, guint
 typedef gboolean  (*GstV4l2SetInOutFunction)  (GstV4l2Object * v4l2object, guint32 input);
 typedef gboolean  (*GstV4l2UpdateFpsFunction) (GstV4l2Object * v4l2object);
 
+
+enum gst_V4L2_ret_type {
+  GST_V4L2_RET_OK = 0,
+  GST_V4L2_RET_FAIL = -1,
+  GST_V4L2_RET_NO_FILE = -2,
+  GST_V4L2_RET_NO_FREE_BUF = -3,
+  GST_V4L2_RET_EOS = -4,
+  GST_V4L2_RET_RES_CHANGE = -5,
+  GST_V4L2_RET_SRC_NOT_SUPPORT = -6,
+};
+
 /* On Android NDK r18b the ioctl() signature uses 'unsigned' instead of
  * 'unsigned long' for the 2nd parameter */
 #ifdef __ANDROID__
@@ -351,6 +362,11 @@ gboolean     gst_v4l2_set_controls    (GstV4l2Object * v4l2object, GstStructure
 gboolean     gst_v4l2_subscribe_event (GstV4l2Object * v4l2object, guint32 event, guint32 id);
 gboolean     gst_v4l2_dequeue_event   (GstV4l2Object * v4l2object, struct v4l2_event *event);
 
+gboolean      gst_v4l2_object_get_crop (GstV4l2Object * obj, guint *crop_width, guint *crop_height);
+gint gst_v4l2_object_sub_event (GstV4l2Object * v4l2object);
+gint gst_v4l2_object_check_res_change (GstV4l2Object * v4l2object);
+gint gst_v4l2_object_poll (GstV4l2Object * v4l2object, gint timeout);
+
 G_END_DECLS
 
 #endif /* __GST_V4L2_OBJECT_H__ */
diff --git a/sys/v4l2/gstv4l2transform.c b/sys/v4l2/gstv4l2transform.c
index c80c028..77b5ad0 100644
--- a/sys/v4l2/gstv4l2transform.c
+++ b/sys/v4l2/gstv4l2transform.c
@@ -248,6 +248,11 @@ outcaps_failed:
     gst_v4l2_error (self, &error);
     goto failed;
   }
+stop_failed:
+  {
+    GST_ERROR_OBJECT (self, "failed to stop streaming");
+    goto failed;
+  }
 failed:
   return FALSE;
 }
diff --git a/sys/v4l2/gstv4l2videodec.c b/sys/v4l2/gstv4l2videodec.c
index 3042995..09af7e7 100644
--- a/sys/v4l2/gstv4l2videodec.c
+++ b/sys/v4l2/gstv4l2videodec.c
@@ -1,3 +1,5 @@
+//SPDX-License-Identifier: LGPL-2.1
+
 /*
  * Copyright (C) 2014 Collabora Ltd.
  *     Author: Nicolas Dufresne <nicolas.dufresne@collabora.com>
@@ -42,6 +44,9 @@
 #include <string.h>
 #include <gst/gst-i18n-plugin.h>
 
+#include <sys/poll.h>
+#include <poll.h>
+
 GST_DEBUG_CATEGORY_STATIC (gst_v4l2_video_dec_debug);
 #define GST_CAT_DEFAULT gst_v4l2_video_dec_debug
 
@@ -67,6 +72,42 @@ G_DEFINE_ABSTRACT_TYPE (GstV4l2VideoDec, gst_v4l2_video_dec,
 
 static GstFlowReturn gst_v4l2_video_dec_finish (GstVideoDecoder * decoder);
 
+static gint
+gst_v4l2_video_dec_check_empty_buffer(GstV4l2Object * v4l2object, gint timeout)
+{
+  struct pollfd pfd;
+  gshort wait_event = V4L2_TYPE_IS_OUTPUT (v4l2object->type) ? POLLOUT : POLLIN;
+  gint ret = 0;
+  pfd.fd = v4l2object->video_fd;
+  pfd.events = POLLERR;
+  pfd.events |= wait_event;
+
+  GST_LOG ("before poll");
+  ret = poll (&pfd, 1, timeout);
+  GST_LOG ("after poll, pfd.revents=%d", pfd.revents);
+
+  if (ret == -1) {
+    GST_LOG ("poll fail");
+    return GST_V4L2_RET_FAIL;
+  }
+
+  if (pfd.revents & POLLERR) {
+    GST_LOG ("poll ERROR");
+    return GST_V4L2_RET_FAIL;
+  }
+
+  if ((pfd.revents & wait_event) == wait_event) {
+    GST_LOG ("poll has data to read");
+    return GST_V4L2_RET_OK;
+  }
+  else {
+    GST_LOG ("poll has no data to read");
+    return GST_V4L2_RET_NO_FREE_BUF;
+  }
+}
+
+
+
 static void
 gst_v4l2_video_dec_set_property (GObject * object,
     guint prop_id, const GValue * value, GParamSpec * pspec)
@@ -186,6 +227,7 @@ gst_v4l2_video_dec_start (GstVideoDecoder * decoder)
   gst_v4l2_object_unlock (self->v4l2output);
   g_atomic_int_set (&self->active, TRUE);
   self->output_flow = GST_FLOW_OK;
+  self->received_caps_event = FALSE;
 
   return TRUE;
 }
@@ -471,9 +513,9 @@ gst_v4l2_video_dec_finish (GstVideoDecoder * decoder)
 
   GST_DEBUG_OBJECT (decoder, "Done draining buffers");
 
-  /* Draining of the capture buffer has completed. 
+  /* Draining of the capture buffer has completed.
    * If any pending frames remain at this point there is a decoder error.
-   * This has been observed as a driver bug, where eos is sent too early.   
+   * This has been observed as a driver bug, where eos is sent too early.
    * These frames will never be rendered, so drop them now with a warning */
 
   pending_frames = gst_video_decoder_get_frames (decoder);
@@ -528,6 +570,94 @@ check_system_frame_number_too_old (guint32 current, guint32 old)
   return FALSE;
 }
 
+static void
+gst_v4l2_update_caps (GstVideoDecoder * decoder, GstVideoFormat format, guint width, guint height, guint crop_width, guint crop_height)
+{
+  GstCaps *prevcaps = NULL;
+  GstCaps *updatecaps = NULL;
+  GstStructure *s = NULL;
+
+  prevcaps = gst_pad_get_current_caps (decoder->srcpad);
+
+  if (prevcaps) {
+    GST_DEBUG_OBJECT (decoder, "before update caps, srcpad caps: %" GST_PTR_FORMAT, prevcaps);
+    gboolean ret = TRUE;
+    gboolean res_changed = FALSE;
+    gint disp_width = 0;
+    gint disp_height = 0;
+    gint pre_width = 0;
+    gint pre_height = 0;
+    gchar* pre_format = NULL;
+    gchar* cur_format = NULL;
+
+    s = gst_caps_get_structure (prevcaps, 0);
+    if (s && gst_structure_has_field (s, "display_width"))
+      gst_structure_get_int (s, "display_width", &disp_width);
+
+    if (s && gst_structure_has_field (s, "display_height"))
+      gst_structure_get_int (s, "display_height", &disp_height);
+
+    if (s && gst_structure_has_field (s, "width"))
+      gst_structure_get_int (s, "width", &pre_width);
+
+    if (s && gst_structure_has_field (s, "height"))
+      gst_structure_get_int (s, "height", &pre_height);
+
+    if (s && gst_structure_has_field (s, "format"))
+      pre_format = gst_structure_get_string (s, "format");
+
+    GST_INFO("display_width=%d,display_height=%d,crop.width=%d,crop.height=%d,prewidth=%d,preheight=%d,width=%d,height=%d",
+      disp_width, disp_height, crop_width, crop_height, pre_width, pre_height, width, height);
+
+    cur_format = gst_video_format_to_string (format);
+
+    GST_INFO_OBJECT (decoder, "pre_format %s cur format %s", pre_format, cur_format);
+
+    updatecaps = gst_caps_copy_nth (prevcaps, 0);
+
+    gst_caps_set_simple (updatecaps, "format", G_TYPE_STRING, cur_format, NULL);
+
+    if ((crop_width != disp_width) || (crop_height != disp_height)) {
+      res_changed = TRUE;
+      gst_caps_set_simple (updatecaps, "display_width", G_TYPE_INT, crop_width, NULL);
+      gst_caps_set_simple (updatecaps, "display_height", G_TYPE_INT, crop_height, NULL);
+    }
+
+    if ((pre_width != width) || (pre_height != height)) {
+      res_changed = TRUE;
+      gst_caps_set_simple (updatecaps, "width", G_TYPE_INT, width, NULL);
+      gst_caps_set_simple (updatecaps, "height", G_TYPE_INT, height, NULL);
+    }
+
+    if (res_changed == TRUE) {
+      GstVideoCodecState *state = NULL;
+      GstCaps *after_caps = NULL;
+      state = gst_video_decoder_get_output_state(decoder);
+      state->caps = updatecaps;
+      state->allocation_caps = updatecaps;
+      GST_DEBUG_OBJECT (decoder, "update caps: %" GST_PTR_FORMAT, updatecaps);
+      ret = gst_pad_set_caps (decoder->srcpad, updatecaps);
+      if (ret == FALSE){
+        GST_INFO_OBJECT (decoder, "gst_pad_set_caps FAILED");
+      }
+
+      after_caps = gst_pad_get_current_caps (decoder->srcpad);
+      if(after_caps)
+      {
+        GST_DEBUG_OBJECT (decoder, "after update caps, srcpad caps: %" GST_PTR_FORMAT, after_caps);
+        gst_caps_unref (after_caps);
+      }
+
+    }
+
+    if (prevcaps)
+      gst_caps_unref (prevcaps);
+    if (updatecaps)
+      gst_caps_unref (updatecaps);
+  }
+  return;
+}
+
 static void
 gst_v4l2_video_dec_loop (GstVideoDecoder * decoder)
 {
@@ -536,6 +666,9 @@ gst_v4l2_video_dec_loop (GstVideoDecoder * decoder)
   GstVideoCodecFrame *frame;
   GstBuffer *buffer = NULL;
   GstFlowReturn ret;
+  struct pollfd pfd;
+  gshort wait_event = V4L2_TYPE_IS_OUTPUT(self->v4l2capture->type) ? POLLOUT : POLLIN;
+  gint v4l2_ret = 0;
 
   GST_LOG_OBJECT (decoder, "Allocate output buffer");
 
@@ -545,6 +678,95 @@ gst_v4l2_video_dec_loop (GstVideoDecoder * decoder)
      * stream lock. we know that the acquire may need to poll until more frames
      * comes in and holding this lock would prevent that.
      */
+    v4l2_ret = gst_v4l2_object_poll (self->v4l2capture, 0);
+
+    GST_DEBUG_OBJECT (decoder, "v4l2 object poll ret: %d", v4l2_ret);
+
+    if (v4l2_ret == GST_V4L2_RET_EOS) {
+      GST_DEBUG_OBJECT (decoder, "got eos event");
+    }
+
+    if (v4l2_ret == GST_V4L2_RET_SRC_NOT_SUPPORT) {
+      goto src_not_support;
+    }
+
+    if (v4l2_ret == GST_V4L2_RET_RES_CHANGE) {
+      self->res_changed_state = TRUE;
+    }
+
+    if (self->res_changed_state == TRUE) {
+      if ( gst_v4l2_video_dec_check_empty_buffer(self->v4l2capture, 0) == GST_V4L2_RET_NO_FREE_BUF ) {
+        GST_DEBUG_OBJECT (decoder, "enter resolution change flow");
+        GstVideoInfo info;
+        guint crop_width = 0;
+        guint crop_height = 0;
+
+        gst_v4l2_buffer_pool_streamoff_res_change(self->v4l2capture->pool);//only after stream off, gst can get new resolution from drv
+
+        if (!gst_v4l2_object_acquire_format (self->v4l2capture, &info)) {
+          GST_INFO_OBJECT (decoder, "gst_v4l2_object_acquire_format failed");
+          goto beach;
+        }
+
+        if (TRUE == gst_v4l2_object_get_crop(self->v4l2capture, &crop_width, &crop_height)) {
+          gst_v4l2_update_caps(decoder, info.finfo->format, info.width, info.height, crop_width, crop_height);
+        }
+        else {
+          GST_WARNING_OBJECT (decoder, "gst_v4l2_object_get_crop failed");
+          goto beach;
+        }
+
+        if(GST_V4L2_IS_ACTIVE (self->v4l2capture)) {
+          if (!gst_v4l2_object_stop (self->v4l2capture)) {
+            GST_WARNING_OBJECT (decoder, "stop v4l2capture object failed");
+            goto beach;
+          }
+        }
+
+        GST_DEBUG_OBJECT (decoder, "enter negotiate");
+
+        if (!gst_video_decoder_negotiate (decoder)) {
+            GST_ERROR_OBJECT (decoder, "negotiate failed");
+            goto beach;
+        }
+
+        /* ensure pool is active, usually will not excute */
+        if (!gst_buffer_pool_is_active (GST_BUFFER_POOL (self->v4l2capture->pool))) {
+          if (!gst_buffer_pool_set_active (GST_BUFFER_POOL (self->v4l2capture->pool),TRUE))
+          {
+             GST_ERROR_OBJECT (decoder, "Buffer pool activation failed");
+             goto beach;
+          }
+        }
+
+        if (self->received_flushing_event) {
+          GST_DEBUG_OBJECT (decoder, "set new pool into flushing");
+          gst_buffer_pool_set_flushing (self->v4l2capture->pool, TRUE);
+          self->received_flushing_event = FALSE;
+        }
+
+        self->res_changed_state = FALSE;
+      }
+      else {
+        GST_DEBUG_OBJECT (decoder, "has buffer");
+      }
+    }
+
+    {
+      GstV4l2BufferPool *cpool =
+          GST_V4L2_BUFFER_POOL (gst_v4l2_object_get_buffer_pool
+          (self->v4l2capture));
+      if ((GST_FLOW_OK == gst_v4l2_buffer_pool_poll_event (cpool, TRUE))) {
+        if (gst_poll_fd_has_pri (cpool->poll, &cpool->pollfd)) {
+          GST_DEBUG_OBJECT (decoder, "has pri event");
+          continue;
+        }
+      } else {
+        GST_DEBUG_OBJECT (decoder, "has error");
+      }
+    }
+    GST_DEBUG_OBJECT (decoder, "pool event, ret: %d", ret);
+
     pool = gst_video_decoder_get_buffer_pool (decoder);
 
     /* Pool may be NULL if we started going to READY state */
@@ -616,6 +838,18 @@ gst_v4l2_video_dec_loop (GstVideoDecoder * decoder)
 
   return;
 
+src_not_support:
+  {
+    GST_ERROR_OBJECT (decoder,
+        "Vdec not support the source, post error message to pipeline to stop playing it");
+    GError *gerror = g_error_new_literal (G_FILE_ERROR,
+        G_FILE_ERROR_NOENT, "Vdec not support the source");
+    gchar *sent_debug = g_strdup_printf ("%s(%d): %s ()",__FILE__, __LINE__, __FUNCTION__);
+
+    gst_element_post_message (&decoder->element,
+        gst_message_new_error(GST_OBJECT_CAST (decoder), gerror, sent_debug));
+  }
+
 beach:
   GST_DEBUG_OBJECT (decoder, "Leaving output thread: %s",
       gst_flow_get_name (ret));
@@ -738,8 +972,12 @@ gst_v4l2_video_dec_handle_frame (GstVideoDecoder * decoder,
     }
 
     GST_VIDEO_DECODER_STREAM_UNLOCK (decoder);
+
     GST_LOG_OBJECT (decoder, "Passing buffer with system frame number %u",
         processed ? frame->system_frame_number : 0);
+
+    if (gst_v4l2_object_sub_event (self->v4l2output) < 0)
+      goto register_sub_event_failed;
     ret =
         gst_v4l2_buffer_pool_process (GST_V4L2_BUFFER_POOL (pool), &codec_data,
         processed ? &frame->system_frame_number : &dummy_frame_number);
@@ -751,6 +989,9 @@ gst_v4l2_video_dec_handle_frame (GstVideoDecoder * decoder,
     self->v4l2capture->info.fps_d = self->v4l2output->info.fps_d;
     self->v4l2capture->info.fps_n = self->v4l2output->info.fps_n;
 
+    if (gst_v4l2_object_poll (self->v4l2output, 0) == GST_V4L2_RET_SRC_NOT_SUPPORT)
+      goto src_not_support;
+
     /* For decoders G_FMT returns coded size, G_SELECTION returns visible size
      * in the compose rectangle. gst_v4l2_object_acquire_format() checks both
      * and returns the visible size as with/height and the coded size as
@@ -767,7 +1008,7 @@ gst_v4l2_video_dec_handle_frame (GstVideoDecoder * decoder,
     GST_DEBUG_OBJECT (self, "Acquired caps: %" GST_PTR_FORMAT, acquired_caps);
     st = gst_caps_get_structure (acquired_caps, 0);
     gst_structure_remove_fields (st, "format", "colorimetry", "chroma-site",
-        NULL);
+      NULL);
 
     /* Probe currently available pixel formats */
     available_caps = gst_caps_copy (self->probed_srccaps);
@@ -846,6 +1087,8 @@ gst_v4l2_video_dec_handle_frame (GstVideoDecoder * decoder,
     /* Start the processing task, when it quits, the task will disable input
      * processing to unlock input if draining, or prevent potential block */
     self->output_flow = GST_FLOW_FLUSHING;
+    if (gst_v4l2_object_sub_event (self->v4l2capture) < 0)
+      goto register_sub_event_failed;
     if (!gst_pad_start_task (decoder->srcpad,
             (GstTaskFunction) gst_v4l2_video_dec_loop, self, NULL))
       goto start_task_failed;
@@ -920,6 +1163,21 @@ process_failed:
     ret = GST_FLOW_ERROR;
     goto drop;
   }
+
+src_not_support:
+  {
+    GST_ERROR_OBJECT (self, "Vdec not support the source");
+    ret = GST_FLOW_ERROR;
+    goto drop;
+  }
+
+register_sub_event_failed:
+  {
+    GST_ERROR_OBJECT (self, "register sub event to driver failed");
+    ret = GST_FLOW_ERROR;
+    goto drop;
+  }
+
 drop:
   {
     if (pool)
@@ -1020,7 +1278,38 @@ gst_v4l2_video_dec_sink_event (GstVideoDecoder * decoder, GstEvent * event)
       GST_DEBUG_OBJECT (self, "flush start");
       gst_v4l2_object_unlock (self->v4l2output);
       gst_v4l2_object_unlock (self->v4l2capture);
+      self->received_flushing_event = TRUE;
       break;
+#if 1
+      /*
+      MTK add, we need support two flow, and these two feature are conflict in h264parse,
+      1) decoder resolution changed
+      that need h264parse do not send caps when resolution change(MTK h264parse flow from AUTO)
+      decoder plugin will get new resolution from dec drv, not from parser.
+
+      2) encoder resolution changed
+      that need h264parse send caps when resolution changed(this is flow from OSS)
+
+      so, we revert AUTO CL, let h264parse as same with OSS, but we do not received caps event when resolution changed
+      so, i add these code
+      */
+          case GST_EVENT_CAPS:
+          {
+            GstCaps *caps;
+
+            gst_event_parse_caps (event, &caps);
+            GST_DEBUG_OBJECT (self, "caps: %" GST_PTR_FORMAT, caps);
+
+            if (self->received_caps_event == TRUE) {
+              gst_event_unref (event);
+              event = NULL;
+              return TRUE;
+            }
+
+            self->received_caps_event = TRUE;
+            break;
+          }
+#endif
     default:
       break;
   }
@@ -1033,6 +1322,10 @@ gst_v4l2_video_dec_sink_event (GstVideoDecoder * decoder, GstEvent * event)
       gst_pad_stop_task (decoder->srcpad);
       GST_DEBUG_OBJECT (self, "flush start done");
       break;
+    case GST_EVENT_FLUSH_STOP:
+      self->received_flushing_event = FALSE;
+      GST_DEBUG_OBJECT (self, "flush stop done");
+      break;
     default:
       break;
   }
@@ -1094,6 +1387,10 @@ gst_v4l2_video_dec_subinstance_init (GTypeInstance * instance, gpointer g_class)
 
   gst_video_decoder_set_packetized (decoder, TRUE);
 
+  self->res_changed_state = FALSE;
+  self->received_caps_event = FALSE;
+  self->received_flushing_event = FALSE;
+
   self->v4l2output = gst_v4l2_object_new (GST_ELEMENT (self),
       GST_OBJECT (GST_VIDEO_DECODER_SINK_PAD (self)),
       V4L2_BUF_TYPE_VIDEO_OUTPUT, klass->default_device,
diff --git a/sys/v4l2/gstv4l2videodec.h b/sys/v4l2/gstv4l2videodec.h
index 6696fcb..331b2cb 100644
--- a/sys/v4l2/gstv4l2videodec.h
+++ b/sys/v4l2/gstv4l2videodec.h
@@ -1,3 +1,5 @@
+//SPDX-License-Identifier: LGPL-2.1
+
 /*
  * Copyright (C) 2014 Collabora Ltd.
  *     Author: Nicolas Dufresne <nicolas.dufresne@collabora.co.uk>
@@ -62,6 +64,11 @@ struct _GstV4l2VideoDec
   GstVideoCodecState *input_state;
   gboolean active;
   GstFlowReturn output_flow;
+
+  gboolean res_changed_state;
+  gboolean received_caps_event;
+
+  gboolean received_flushing_event;
 };
 
 struct _GstV4l2VideoDecClass
-- 
2.18.0

